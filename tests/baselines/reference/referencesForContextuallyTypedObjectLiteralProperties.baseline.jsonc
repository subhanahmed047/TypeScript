// === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
// interface IFoo { /*FIND ALL REFS*/[|xy|]: number; }
// 
// // Assignment
// var a1: IFoo = { [|xy|]: 0 };
// var a2: IFoo = { [|xy|]: 0 };
// 
// // Function call
// function consumer(f: IFoo) { }
// consumer({ [|xy|]: 1 });
// 
// // Type cast
// var c = <IFoo>{ [|xy|]: 0 };
// 
// // Array literal
// var ar: IFoo[] = [{ [|xy|]: 1 }, { [|xy|]: 2 }];
// 
// // Nested object literal
// var ob: { ifoo: IFoo } = { ifoo: { [|xy|]: 0 } };
// 
// // Widened type
// var w: IFoo = { [|xy|]: undefined };
// 
// // Untped -- should not be included
// var u = { xy: 0 };

[
  {
    === Definition ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { [|xy|]: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { [|xy: number;|] }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
    === References ===
      === 0 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { [|xy|]: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { [|xy: number;|] }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 1 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { [|xy|]: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { [|xy: 0|] };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 2 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { [|xy|]: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { [|xy: 0|] };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 3 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ [|xy|]: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ [|xy: 1|] });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 4 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ [|xy|]: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ [|xy: 0|] };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 5 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ [|xy|]: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ [|xy: 1|] }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 6 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { [|xy|]: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { [|xy: 2|] }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 7 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { [|xy|]: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { xy: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { [|xy: 0|] } };
        // 
        // // Widened type
        // var w: IFoo = { xy: undefined };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
      === 8 ===
      // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
      // interface IFoo { xy: number; }
      // 
      // // Assignment
      // var a1: IFoo = { xy: 0 };
      // var a2: IFoo = { xy: 0 };
      // 
      // // Function call
      // function consumer(f: IFoo) { }
      // consumer({ xy: 1 });
      // 
      // // Type cast
      // var c = <IFoo>{ xy: 0 };
      // 
      // // Array literal
      // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
      // 
      // // Nested object literal
      // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
      // 
      // // Widened type
      // var w: IFoo = { [|xy|]: undefined };
      // 
      // // Untped -- should not be included
      // var u = { xy: 0 };
      === ContextSpan ===
        // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
        // interface IFoo { xy: number; }
        // 
        // // Assignment
        // var a1: IFoo = { xy: 0 };
        // var a2: IFoo = { xy: 0 };
        // 
        // // Function call
        // function consumer(f: IFoo) { }
        // consumer({ xy: 1 });
        // 
        // // Type cast
        // var c = <IFoo>{ xy: 0 };
        // 
        // // Array literal
        // var ar: IFoo[] = [{ xy: 1 }, { xy: 2 }];
        // 
        // // Nested object literal
        // var ob: { ifoo: IFoo } = { ifoo: { xy: 0 } };
        // 
        // // Widened type
        // var w: IFoo = { [|xy: undefined|] };
        // 
        // // Untped -- should not be included
        // var u = { xy: 0 };
  }
]

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
      "kind": "property",
      "name": "(property) IFoo.xy: number",
      "textSpan": {
        "start": 17,
        "length": 2
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "IFoo",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "xy",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 17,
        "length": 11
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 17,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 17,
          "length": 11
        },
        "isWriteAccess": false,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 63,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 63,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 89,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 89,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 158,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 158,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 198,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 198,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 245,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 245,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 256,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 256,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 327,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 327,
          "length": 5
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 371,
          "length": 2
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts",
        "contextSpan": {
          "start": 371,
          "length": 13
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]